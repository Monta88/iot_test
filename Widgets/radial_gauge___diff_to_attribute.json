{
  "alias": "radial_gauge_diff2",
  "name": "Radial gauge - Diff to attribute",
  "descriptor": {
    "type": "latest",
    "sizeX": 8.5,
    "sizeY": 6.5,
    "resources": [],
    "templateHtml": "<!-- 2019.10.01 -->\n<canvas id=\"radialGauge\"></canvas>\n",
    "templateCss": "",
    "controllerScript": "let $scope;\nlet attributeService;\nlet types;\nlet ticker;\n\nself.onInit = function() \n{\n    $scope = self.ctx.$scope;\n    attributeService = $scope.$injector.get('attributeService');\n    types = $scope.$injector.get('types');\n\n    self.ctx.gauge = new TbAnalogueRadialGauge(self.ctx, 'radialGauge');    \n    ticker = Date.now();\n}\n\n// Delete the temporary server attribute on exit\nself.deleteTemp = function()\n{\n    if (self.ctx.datasources.length > 0) datasource = self.ctx.datasources[0];\n    if (self.ctx.data.length > 0) dataKey = self.ctx.data[0].dataKey;\n    if (datasource.type === 'entity' && \n        datasource.entityType === \"DEVICE\" &&\n        datasource.entityId &&\n        dataKey.type === \"attribute\") {\n            attributeService.saveEntityAttributes(\n                datasource.entityType,\n                datasource.entityId,\n                types.attributesScope.server.value, \n                [{ key: self.ctx.data[0].dataKey.name}]\n            ).then(function success() \n            {\n//                console.log(\"Delete Success!\")\n            },\n            function fail() \n            {\n                console.log(\"Delete Fail!\")\n            });\n    }\n}\n\nself.magic = function()\n{\n    delta_value = 0;\n\n    if (self.ctx.data.length >= 3)\n    {\n        delta = self.ctx.data[0];\n\n        d1 = self.ctx.data[1];\n        d2 = self.ctx.data[2];\n        if (d1.data.length > 0 && d2.data.length > 0)\n        {\n// Oldest value is first (index 0) in array\n// Latest value is last value in array\n            tv1 = d1.data[d1.data.length-1];\n            tv2 = d2.data[d2.data.length-1];\n            delta_value = tv1[1] - tv2[1];\n// BUG: Do not write directly to display, as the \"post processing\" is skipped\n//            if (delta.data.length > 0) delta.data[delta.data.length-1][1] = delta_value;\n        }\n        \n// Store value if not existing or max every 1000 ms\n        if ((Date.now() - ticker > 1000) || delta.data.length < 1)\n        {\n            ticker = Date.now();\n\n            if (self.ctx.datasources.length > 0) datasource = self.ctx.datasources[0];\n        \n            if (datasource.type === 'entity' && \n                datasource.entityType === \"DEVICE\" &&\n                datasource.entityId &&\n                delta.dataKey.type === \"attribute\")\n            {\n                attributeService.saveEntityAttributes(\n                    datasource.entityType,\n                    datasource.entityId,\n                    types.attributesScope.server.value, \n                    [{ key: delta.dataKey.name, value:  delta_value}]\n                ).then(function success() \n                {\n    //                console.log(\"Success!\")\n                },\n                function fail() \n                {\n                    console.log(\"Fail!\")\n                });\n            }\n        }\n    }\n\n}\n\nself.onDataUpdated = function() \n{\n    self.magic();\n\n    self.ctx.gauge.update();\n}\n\nself.onResize = function() \n{\n    self.ctx.gauge.resize();\n}\n\nself.onMobileModeChanged = function() {\n    self.ctx.gauge.mobileModeChanged();\n}\n\nself.getSettingsSchema = function() \n{\n    schema = TbAnalogueRadialGauge.settingsSchema;\n    schema.schema.properties.deleteOnExit = {\n        title : \"Delete property on exit\",\n        type: \"boolean\",\n        default: false\n    };\n\n    schema.form.unshift(\"deleteOnExit\");\n    \n    return schema;\n}\n\nself.typeParameters = function() {\n    return {\n        maxDatasources: 3,\n        maxDataKeys: 1\n    };\n}\n\nself.onDestroy = function() \n{\n    if (self.ctx.settings.deleteOnExit) self.deleteTemp();\n}\n",
    "settingsSchema": "{}",
    "dataKeySettingsSchema": "{}\n",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"A\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.7282710489093589,\"funcBody\":\"var value = prevValue + Math.random() * 50 - 25;\\nif (value < -100) {\\n\\tvalue = -100;\\n} else if (value > 100) {\\n\\tvalue = 100;\\n}\\nreturn value;\"}]},{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"B\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.39511341549088796,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]},{\"type\":\"function\",\"name\":\"functions\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"fgdfssdf\",\"color\":\"#f44336\",\"settings\":{},\"_hash\":0.5942924587354177,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"startAngle\":45,\"ticksAngle\":270,\"needleCircleSize\":10,\"maxValue\":100,\"showUnitTitle\":true,\"minorTicks\":2,\"valueBox\":true,\"valueInt\":3,\"colorPlate\":\"#fff\",\"colorMajorTicks\":\"#444\",\"colorMinorTicks\":\"#666\",\"colorNeedleShadowUp\":\"rgba(2,255,255,0.2)\",\"colorNeedleShadowDown\":\"rgba(188,143,143,0.45)\",\"colorValueBoxRect\":\"#888\",\"colorValueBoxRectEnd\":\"#666\",\"colorValueBoxBackground\":\"#babab2\",\"colorValueBoxShadow\":\"rgba(0,0,0,1)\",\"highlightsWidth\":15,\"showBorder\":true,\"numbersFont\":{\"family\":\"Roboto\",\"size\":18,\"style\":\"normal\",\"weight\":\"500\"},\"titleFont\":{\"family\":\"Roboto\",\"size\":24,\"style\":\"normal\",\"weight\":\"500\",\"color\":\"#888\"},\"unitsFont\":{\"family\":\"Roboto\",\"size\":22,\"style\":\"normal\",\"weight\":\"500\",\"color\":\"#888\"},\"valueFont\":{\"family\":\"Roboto\",\"size\":40,\"style\":\"normal\",\"weight\":\"500\",\"color\":\"#444\",\"shadowColor\":\"rgba(0,0,0,0.3)\"},\"animation\":true,\"animationDuration\":500,\"animationRule\":\"cycle\",\"deleteOnExit\":false},\"title\":\"Radial gauge - Diff to attribute\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"enableDataExport\":true,\"widgetStyle\":{},\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
  }
}