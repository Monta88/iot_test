{
  "alias": "dropdown_enumeratred_selector",
  "name": "Dropdown enumeratred selector",
  "descriptor": {
    "type": "latest",
    "sizeX": 10,
    "sizeY": 2,
    "resources": [],
    "templateHtml": "<!-- 2019.09.27 15:03  Added default value when missing variable -->\n<!-- 2019.09.25 16:54  Fixed key/value bug. Added feedback -->\n<!-- 2019.09.18 12:16  Text alignment fix -->\n<!-- 2019.09.18 10:30  Completely redesigned using <span> and <div> and added styling options etc. -->\n<!-- 2019.09.12 21:54 -->\n\n<div class = \"input-box\" id=\"inputContainer\">\n    <form ng-submit=\"updateAttribute($event)\" class = \"input-box-line\">\n        <span class=\"input-box-line-label\" style=\"{{_labelStyle}}\" >{{_labelText}}</span>\n        <span class=\"input-box-line-value\" style=\"{{_textStyle}}\">\n            <span ng-show=\"inputEnabled\" class=\"input-box-line-value-static\">\n                <div class=\"select-class\">\n                    <select ng-init=\"_value = options[0]\" ng-model=\"_value\" ng-options=\"item as item.key for item in options track by item.value\" \n                        ng-focus=\"isFocused = true\" ng-blur=\"changeFocus()\" style=\"text-align-last: {{valueAlign}}; {{_textStyle}}\" >\n                    </select>\n                </div>\n            </span>\n            <span ng-show=\"!inputEnabled\" class=\"input-box-line-value-static\" style=\"text-align: {{valueAlign}}; {{_textStyle}}\">\n                {{_value.key}}\n            </span>\n            <span ng-show = \"false\" class=\"input-box-line-unit\">&nbsp;{{_unit}}</span>\n        </span>\n        <span ng-show=\"inputEnabled\" class=\"input-box-line-buttons\">\n            <md-button\n                class=\"md-icon-button applyChanges\"\n                aria-label=\"Update shared attribute\"\n                type=\"submit\"\n                ng-disabled=\"checkChangedValues()\"\n                ng-click=\"isFocused = false\">\n                <md-icon>check</md-icon>\n                <md-tooltip md-direction=\"top\">Lagre endringer</md-tooltip>\n            </md-button>\n            <md-button\n                class=\"md-icon-button discardChanges\"\n                aria-label=\"Discard changes\"\n                ng-disabled=\"checkChangedValues()\"\n                ng-click=\"restoreValues()\">\n                <md-icon>close</md-icon>\n                <md-tooltip md-direction=\"top\">Forkast endringer</md-tooltip>\n            </md-button>\n        </span>\n    </form>\n</div>",
    "templateCss": "#container {\n    overflow: auto;\n}\n\n.input-box\n{\n    width: 100%;\n    overflow: hidden;\n    display: flex; \n    align-items: baseline;\n    flex-direction: column; \n    flex-wrap: nowrap; \n    justify-content: flex-start; \n    font-weight: 100;\n    \n//    border-style: solid; \n    border-color: yellow;\n}\n\n.input-box-line\n{\n    width: 100%;\n    display: flex; \n    align-items: center;\n    flex-direction: row; \n\n//    border-style: solid; \n    border-color: black;\n}\n\n.input-box-line-label\n{\n    display:flex; \n    flex-basis: auto;\n    flex-shrink: 0;\n    white-space:nowrap;\n    align-self: center;\n\n    opacity: 0.7;\n    font-weight: 400;\n    font-size: 3.500rem;\n\n//    border-style: solid; \n    border-color: white\n}\n\n.input-box-line-unit\n{\n    white-space:nowrap;\n    align-self: center;\n    flex-grow: 0; \n\n    border-style: solid; \n    border-color: yellow;\n}\n\n.input-box-line-value\n{\n    display:flex; \n    justify-content: flex-end; \n    flex-grow: 1; \n    font-size: 5.000rem;\n\n//    border-style: solid; \n    border-color: red;\n}\n\n.select-class select\n{\n    align-self: center;\n    flex-grow: 1; \n    width: 100%; \n    text-align-last: right;\n    color:inherit; \n    font-weight: inherit; \n    font-family: inherit; \n    font-size: inherit; \n    border-style: solid; \n    border-width: 0px 0px 1px 0px; \n    background-color: inherit; \n    border-color: grey;\n}\n\n.select-class option\n{\n/*    direction: rtl; */\n}\n\n.input-box-line-value-static\n{\n    align-self: center;\n    flex-grow: 1;\n    width: 100%; \n//    border-style: solid; \n    border-color: grey;\n}\n\n.input-box-line-buttons\n{\n    display:flex; \n    align-self: flex-end;\n\n//    border-style: solid; \n    border-color: green;\n}\n\n.md-icon-button md-icon {\n    width: 20px;\n    min-width: 20px;\n    height: 20px;\n    min-height: 20px;\n    font-size: 30px;\n}\n\n\n\n\n",
    "controllerScript": "let $scope;\nlet settings;\nlet attributeService;\nlet toast;\nlet utils;\nlet types;\nlet decimalChar;\n\nself.onInit = function() {\n\n    $scope = self.ctx.$scope;\n    attributeService = $scope.$injector.get('attributeService');\n    toast = $scope.$injector.get('toast');\n    utils = $scope.$injector.get('utils');\n    types = $scope.$injector.get('types');\n    settings = angular.copy(self.ctx.settings) || {};\n    decimalChar = (1.5).toLocaleString().charAt(1);\n\n    $scope.settings = settings;\n//    $scope.isValidParameter = true;\n//    $scope.dataKeyDetected = false;\n//    $scope.message = 'No entity selected';\n//    $scope.requiredErrorMessage = settings.requiredErrorMessage || \"Entity attribute is required\";\n   \n// Init scope variables\n    $scope.inputEnabled = self.ctx.settings.inputEnabled;\n    $scope.options = self.ctx.settings.options;\n    $scope.valueAlign = (self.ctx.settings.valueAlignRight) ? \"right\" : \"left\";\n\n// Insert empty element if options are not set.\n    if ($scope.options.length <= 0) \n    {\n        $scope.options = [{ key: settings.defaultValue, value:0 }]\n    }\n\n    $scope._value = { key: settings.defaultValue, value:0 };\n    $scope._value_old = $scope._value;\n    $scope._unit = self.ctx.units;\n\n    if (self.ctx.datasources.length > 0) \n    {\n        var tbDatasource = self.ctx.datasources[0];\n        var datasourceId = 'tbDatasource' + 0;\n\n        self.ctx.datasourceContainer = $('#tbDatasource1', self.ctx.$container);\n\n\n        if (tbDatasource.dataKeys.length > 0) \n        {\n            var dataKey = tbDatasource.dataKeys[0];\n            \n            if (self.ctx.settings.labelVisible) self.ctx.$scope._labelText = dataKey.label;\n            else self.ctx.$scope._labelText = \"\";\n            self.ctx.$scope._txtValue = '0';\n            self.ctx.$scope._txtValue = self.ctx.units;\n            self.ctx.$scope._labelStyle = 'font-size: 12px;';\n            self.ctx.$scope._textStyle = 'font-size: 12px;';\n        }\n    }\n\n    $.fn.textWidth = function() {\n        var html_org = $(this).html();\n        var html_calc = '<span>' + html_org +\n            '</span>';\n        $(this).html(html_calc);\n        var width = $(this).find('span:first')\n            .width();\n        $(this).html(html_org);\n        return width;\n    };\n\n    // Restore all original values when user clicks \"X\"\n    $scope.restoreValues = function() {\n        $scope._value = $scope._value_old;\n    \n        $scope.isFocused = false;\n    };\n\n    // Check if any values changed. Return TRUE if any changes.\n    $scope.checkChangedValues = function() \n    {\n        check = ($scope._value === $scope._value_old)\n\n        return check;\n    }\n\n    $scope.changeFocus = function() \n    {\n        if ($scope._value === $scope._value_old) \n        {\n            $scope.isFocused = false;\n        }\n    }\n\n\n    $scope.updateAttribute = function() \n    {\n        if (self.ctx.datasources && self.ctx.datasources.length > 0) \n        {\n            var datasource = self.ctx.datasources[0];\n\n            if (!(datasource.type === 'entity' && \n                datasource.entityType === \"DEVICE\" &&\n                datasource.entityType && datasource.entityId))\n            {\n                toast.showError('Selected entity cannot be written', angular.element(self.ctx.$container),'bottom left');\n                return;\n            }\n            \n            var dataKey = datasource.dataKeys[0]\n\n            if (dataKey.type != \"attribute\") \n            { \n                toast.showError('Not an attribute', angular.element(self.ctx.$container),'bottom left');\n                return;\n            } \n\n            // Write value to attribute\n            attributeService.saveEntityAttributes(\n                datasource.entityType,\n                datasource.entityId,\n                types.attributesScope.shared.value, \n                [{ key: dataKey.name, value: $scope._value.value }]\n            ).then(function success() \n                {\n                    // Update the HTML \"previous\" values to the new ones\n                    $scope._value_old = $scope._value;\n\n                    if (settings.showResultMessage) \n                    {\n                        toast.showSuccess('Update successful', 1000, angular.element(self.ctx.$container),'bottom left');\n                    }\n                },\n                function fail() \n                {\n                    if (settings.showResultMessage) \n                    {\n                        toast.showError('Update failed', angular.element(self.ctx.$container),'bottom left');\n                    }\n                }\n            );\n        }\n    };\n    \n    self.onResize();\n};\n\n\nself.onDataUpdated = function() \n{\n    function isNumber(n) \n    {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n    \n    if (!$scope.isFocused) \n    {\n        if (self.ctx.data.length > 0) \n        {\n            var cellData = self.ctx.data[0];\n            if (cellData.data.length > 0) \n            {\n                var value = cellData.data[cellData.data.length - 1][1]\n\n                $scope._value = {key: settings.defaultValue+' '+value, value: value };\n                \n                for (i = 0; i < $scope.options.length; i++)\n                {\n                    if ($scope.options[i].value == value)\n                    {\n                        $scope._value = $scope.options[i];\n                        $scope._value_old = $scope._value;\n                    }\n                }\n                \n            }\n        }\n        else $scope._value = {key: settings.defaultValue, value: -1 };\n        \n        self.ctx.$scope.$digest();\n    }\n\n};\n\n\nself.onResize = function() \n{\n\n    self.ctx.$scope._labelStyle = \"\";\n    self.ctx.$scope._textStyle  = \"\";\n\n// Scale font size basded on ctx.height if dynamic scaling ins enabled\n    if (self.ctx.settings.scaleDynamic)\n    {\n        var labelFontSize;\n        self.ctx.padding = self.ctx.height / 20;\n        labelFontSize = self.ctx.height / 1.7;\n        self.ctx.valueFontSize = self.ctx.height / 1.7;\n\n        self.ctx.padding = Math.min(12, self.ctx.padding);\n\n        self.ctx.$scope._labelStyle = 'font-size: ' + labelFontSize + 'px; padding: ' + self.ctx.padding + 'px;'\n        self.ctx.$scope._textStyle = 'font-size: ' + self.ctx.valueFontSize + 'px; padding: ' + self.ctx.padding + 'px;'\n    }\n\n// Add CSS inpuit from settings pane\n    self.ctx.$scope._labelStyle += self.ctx.settings.labelStyle;\n    self.ctx.$scope._textStyle += self.ctx.settings.valueStyle;\n\n};\n\nself.typeParameters = function() \n{\n    return {\n        maxDatasources: 1,\n        maxDataKeys: 1\n    };\n};\n\n\nself.onDestroy = function() {};",
    "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"defaultValue\":{\n                \"title\":\"Default value when missing variable\",\n                \"type\":\"string\",\n                \"default\": \"(empty)\"\n            },\n            \"showResultMessage\" : {\n                \"title\" : \"Show result message\",\n                \"type\": \"boolean\",\n                \"default\" : true\n            },\n            \"inputEnabled\" : {\n                \"title\" : \"Input enabled\",\n                \"type\": \"boolean\",\n                \"default\" : true\n            },\n            \"labelVisible\" : {\n                \"title\" : \"Display label\",\n                \"type\": \"boolean\",\n                \"default\" : true\n            },\n            \"valueAlignRight\" : {\n                \"title\" : \"Right align value\",\n                \"type\": \"boolean\",\n                \"default\" : true\n            },\n            \"scaleDynamic\" : {\n                \"title\" : \"Dynamic font scaling\",\n                \"type\": \"boolean\",\n                \"default\" : true\n            },\n            \"labelStyle\":{\n                \"title\":\"Label styling (CSS). Note: this may override dynamic scaling!\",\n                \"type\":\"string\"\n            },\n            \"valueStyle\":{\n                \"title\":\"Value styling (CSS). Note: this may override dynamic scaling!\",\n                \"type\":\"string\"\n            },\n             \"options\": {\n                \"title\": \"Option list\",\n                \"type\": \"array\",\n                \"items\": {\n                   \"title\": \"Option\",\n                   \"type\": \"object\",\n                   \"required\": [\"key\"],\n                   \"properties\": {\n                       \"key\": {\n                           \"title\": \"Key in list\",\n                           \"type\": \"string\",\n                           \"default\": \"OptionKey\"\n                       },\n                       \"value\" : {\n                           \"title\": \"Value in list\",\n                           \"type\": \"string\",\n                           \"default\": \"-1\"\n                       }\n                   }\n                }\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"showResultMessage\",\n        \"inputEnabled\",\n        \"labelVisible\",\n        \"valueAlignRight\",\n        \"scaleDynamic\",\n        \"labelStyle\",\n        \"valueStyle\",\n        \"defaultValue\",\n        {\n            \"key\": \"options\",\n            \"items\": [\n                \"options[].key\",\n                \"options[].value\"\n            ]\n        }\n    ]\n}",
    "dataKeySettingsSchema": "{}\n",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.2392660816082064,\"funcBody\":\"return Math.floor(Math.random()*10)\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"rgba(231, 198, 226, 0.95)\",\"color\":\"rgba(35, 47, 46, 0.87)\",\"padding\":\"16px\",\"settings\":{\"options\":[{\"key\":\"Auto\",\"value\":\"0\"},{\"key\":\"Manual\",\"value\":\"1\"},{\"value\":\"10\",\"key\":\"High\"},{\"key\":\"Ludicrous\",\"value\":\"1337\"},{\"key\":\"To\",\"value\":\"2\"},{\"key\":\"Tre\",\"value\":\"3\"}],\"inputEnabled\":false,\"labelVisible\":true,\"scaleDynamic\":true,\"valueAlignRight\":true,\"showResultMessage\":true,\"defaultValue\":\"(unknown)\"},\"title\":\"Dropdown enumeratred selector\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"units\":\"°C\",\"decimals\":0,\"useDashboardTimewindow\":true,\"showLegend\":false,\"widgetStyle\":{},\"actions\":{},\"enableDataExport\":true,\"displayTimewindow\":true}"
  }
}