{
  "alias": "delta_timeseries_v3",
  "name": "Delta Bar",
  "descriptor": {
    "type": "timeseries",
    "sizeX": 10.5,
    "sizeY": 5,
    "resources": [],
    "templateHtml": "<!-- Delta bar widget -->\n<!-- 2019.10.01 12:11  Fixed timing. Calculating backwards in time -->\n<!-- 2019.09.30 12:00  -->\n<!DOCTYPE html>",
    "templateCss": ".legend {\n    font-size: 13px;\n    line-height: 10px;\n}\n\n.legend table { \n    border-spacing: 0px;\n    border-collapse: separate;\n}\n\n.mouse-events .flot-overlay {\n    cursor: crosshair; \n}\n\n",
    "controllerScript": "// https://github.com/thingsboard/thingsboard/blob/75dec357ec592c4ddc5ec39501d618aee51991b5/ui/src/app/widget/lib/flot-widget.js\r\n\r\n// self.ctx.$scope.$injector.get('utils').guid();\r\n\r\nlet settings;\r\n\r\nself.onInit = function() {\r\n    settings = angular.copy(self.ctx.settings) || {};\r\n    self.ctx.flot = new TbFlot(self.ctx, \"bar\");\r\n//    self.ctx.flot = new TbFlot(self.ctx, settings.diagramType);\r\n}\r\n\r\nself.onResize = function() {\r\n    self.ctx.flot.resize();\r\n}\r\n\r\nself.onEditModeChanged = function() {\r\n    self.ctx.flot.checkMouseEvents();\r\n}\r\n\r\nself.onMobileModeChanged = function() {\r\n    self.ctx.flot.checkMouseEvents();\r\n}\r\n\r\nself.getSettingsSchema = function() {\r\n    schema = TbFlot.settingsSchema('bar');\r\n/*\r\n    schema.schema.properties.diagramType = {\r\n        title: \"Diagram type\",\r\n        type: \"string\",\r\n        enum: [\"bar\", \"graph\"],\r\n        default: \"bar\"\r\n    };\r\n    \r\n    schema.schema.properties.interval = {\r\n        title : \"Interval (ms)\",\r\n        type: \"number\",\r\n        default: 3600\r\n    };\r\n    \r\n    s = {\r\n        key: \"diagramType\",\r\n        type: \"radios\",\r\n        titleMap: [{value: \"bar\", name: \"Bar\"},{value: \"graph\", name: \"Graph\"}]\r\n    };\r\n\r\n    schema.form.unshift(s);\r\n    schema.form.unshift(\"interval\");\r\n*/\r\n\r\n    return schema;\r\n};\r\n\r\nself.getDataKeySettingsSchema = function() {\r\n    return TbFlot.datakeySettingsSchema(true);\r\n};\r\n\r\nself.onDestroy = function() {\r\n    self.ctx.flot.destroy();\r\n};\r\n\r\n\r\nself.onDataUpdated = function() \r\n{\r\n    for (ds = 0; ds < self.ctx.flot.subscription.data.length; ds++)\r\n    {    \r\n        len = self.ctx.flot.subscription.data[ds].data.length;\r\n\r\n        for (i = len - 1; i > 0; i--) \r\n        {\r\n// Calculate latest/newest value first (high index in array) \r\n            d1 = self.ctx.flot.subscription.data[ds].data[i-1]\r\n            d2 = self.ctx.flot.subscription.data[ds].data[i]\r\n            d2[1] = d2[1] - d1[1]\r\n        }\r\n\r\n// Set oldest value to 0\r\n        if (len > 0) self.ctx.flot.subscription.data[ds].data[0][1] = 0;\r\n    }\r\n    self.ctx.flot.update();\r\n}\r\n\r\n/*\r\n\r\nself.ctx.defaultSubscription.datasources[] -> Entity list\r\nself.ctx.defaultSubscription.datasources[].dataKeys[] -> dataKey list\r\nself.ctx.defaultSubscription.datasources[n].dataKeys[m] -> Entity n, data key m\r\n\r\nself.ctx.defaultSubscription.data[] -> DataKey list (All Entities)\r\n\r\n*/",
    "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"diagramType\": {\n                \"title\": \"Diagram type\",\n                \"type\": \"string\",\n                \"enum\": [\n                    \"bar\",\n                    \"graph\"]\n            },\n            \"interval\" : {\n                \"title\" : \"Interval (ms)\",\n                \"type\": \"number\",\n                \"default\" : 3600\n            }\n        },\n        \"required\": [\"diagramType\"]\n    },\n    \"form\": [\n        {\n            \"key\":\"diagramType\",\n            \"type\":\"radios\",\n            \"titleMap\": [\n                {\n                \"value\": \"bar\",\n                \"name\": \"Bar\"\n                },\n                {\n                \"value\": \"graph\",\n                \"name\": \"Graph\"\n                }\n            ]\n        },\n        \"interval\"\n    ]\n}",
    "dataKeySettingsSchema": "{}",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":false,\"fillLines\":false,\"showPoints\":false,\"axisPosition\":\"left\",\"axisMax\":1,\"axisMin\":0},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random();\\n\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"interval\":5000,\"timewindowMs\":60000},\"aggregation\":{\"type\":\"AVG\",\"limit\":25000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"shadowSize\":4,\"fontColor\":\"#545454\",\"fontSize\":10,\"grid\":{\"color\":\"#545454\",\"tickColor\":\"#DDDDDD\",\"outlineWidth\":1,\"verticalLines\":true,\"horizontalLines\":true},\"xaxis\":{\"showLabels\":true},\"yaxis\":{\"showLabels\":true},\"stack\":true,\"defaultBarWidth\":600},\"title\":\"Delta Bar\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null,\"enableDataExport\":true,\"widgetStyle\":{},\"useDashboardTimewindow\":false,\"displayTimewindow\":true,\"showLegend\":true,\"actions\":{},\"decimals\":2}"
  }
}