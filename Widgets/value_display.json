{
  "alias": "value_display",
  "name": "Value display",
  "descriptor": {
    "type": "latest",
    "sizeX": 8,
    "sizeY": 2.5,
    "resources": [],
    "templateHtml": "<!-- Timestamp        -->\n<!-- 2019.09.18 12:28  Advanced styling fix -->\n<!-- 2019.09.18 10:29 -->\n<!-- 2019.09.17 15:03 -->\n\n<form ng-submit=\"updateAttribute($event)\" class = \"input-box-line\">\n    <span class=\"input-box-line-label\" style=\"{{_labelStyle}}\" >\n        {{_labelText}}\n    </span>\n    <span class=\"input-box-line-value\" style=\"{{_textStyle}}\">\n        <span ng-show=\"inputEnabled\" class=\"input-box-line-value-static\">\n            <input type=\"text\" value=\"<input>\" ng-model=\"_value\"  ng-focus=\"isFocused = true\" ng-blur=\"changeFocus()\" class=\"input-box-line-value-edit\" style=\"{{_textStyle}}\">\n        </span>\n        <span ng-show=\"inputEnabled\" class=\"input-box-line-unit\" style=\"{{_textStyle}}\">\n            &nbsp;{{_unit}}\n        </span>\n        <span ng-show=\"!inputEnabled\" class=\"input-box-line-value-static\" style=\"{{_textStyle}}\">\n            {{_value}}&nbsp;{{_unit}} \n        </span>\n    </span>\n    <span ng-show=\"inputEnabled\" class=\"input-box-line-buttons\">\n        <md-button\n            class=\"md-icon-button applyChanges\"\n            aria-label=\"Update shared attribute\"\n            type=\"submit\"\n            ng-disabled=\"checkChangedValues()\"\n            ng-click=\"isFocused = false\">\n            <md-icon>check</md-icon>\n            <md-tooltip md-direction=\"top\">Lagre endringer</md-tooltip>\n        </md-button>\n        <md-button\n            class=\"md-icon-button discardChanges\"\n            aria-label=\"Discard changes\"\n            ng-disabled=\"checkChangedValues()\"\n            ng-click=\"restoreValues()\">\n            <md-icon>close</md-icon>\n            <md-tooltip md-direction=\"top\">Forkast endringer</md-tooltip>\n        </md-button>\n    </span>\n</form>\n",
    "templateCss": "#container {\n    overflow: auto;\n}\n\n.input-box-line\n{\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    display: flex; \n    align-items: center;\n    flex-direction: row; \n    flex-wrap: nowrap; \n    justify-content: flex-start; \n    align-items: center;\n    font-weight: 100;\n    \n/*    border-style: solid; */\n    border-color: black;\n}\n\n.input-box-line-label\n{\n    display:flex; \n    flex-basis: auto;\n    flex-shrink: 0;\n    white-space:nowrap;\n    opacity: 0.7;\n    font-weight: 400;\n    font-size: 3.500rem;\n\n/*    border-style: solid; */\n    border-color: white\n}\n\n.input-box-line-unit\n{\n    white-space:nowrap;\n    align-self: center;\n    flex-grow: 0; \n\n/*    border-style: solid; */\n    border-color: yellow;\n}\n\n.input-box-line-value\n{\n    display:flex; \n    justify-content: flex-end; \n    flex-grow: 1; \n    font-size: 5.000rem;\n\n/*    border-style: solid; */\n    border-color: red;\n}\n\n.input-box-line-value-edit\n{\n    align-self: center;\n    flex-grow: 1; \n    width: 100%; \n    text-align: right; \n    color:inherit; \n    font-weight: inherit; \n    font-family: inherit; \n    font-size: inherit; \n    border-style: solid; \n    border-width: 0px 0px 1px 0px; \n    background-color: inherit; \n    border-color: grey;\n}\n\n.input-box-line-value-static\n{\n    align-self: center;\n    flex-grow: 1;\n    width: 100%; \n    text-align: right; \n/*    border-style: solid; */\n    border-color: grey;\n}\n\n.input-box-line-buttons\n{\n    display:flex; \n    align-self: flex-end;\n\n/*    border-style: solid; */\n    border-color: green;\n}\n\n.md-icon-button md-icon {\n    width: 20px;\n    min-width: 20px;\n    height: 20px;\n    min-height: 20px;\n    font-size: 30px;\n}\n\n",
    "controllerScript": "let $scope;\nlet settings;\nlet attributeService;\nlet toast;\nlet utils;\nlet types;\nlet decimalChar;\n\nself.onInit = function() {\n\n    $scope = self.ctx.$scope;\n    attributeService = $scope.$injector.get('attributeService');\n    toast = $scope.$injector.get('toast');\n    utils = $scope.$injector.get('utils');\n    types = $scope.$injector.get('types');\n    settings = angular.copy(self.ctx.settings) || {};\n    decimalChar = (1.5).toLocaleString().charAt(1);\n\n    $scope.settings = settings;\n    $scope.isValidParameter = true;\n    $scope.dataKeyDetected = false;\n    $scope.message = 'No entity selected';\n    $scope.requiredErrorMessage = settings.requiredErrorMessage || \"Entity attribute is required\";\n    \n// Init scope variables\n    $scope.inputEnabled = self.ctx.settings.inputEnabled;\n    $scope._value_old = $scope._value;\n    $scope._unit = self.ctx.units;\n\n    if (self.ctx.datasources && self.ctx.datasources.length) \n    {\n        var datasource = self.ctx.datasources[0];\n\n        if (datasource.type === 'entity') \n        {\n            if (datasource.entityType === \"DEVICE\") \n            {\n                if (datasource.entityType && datasource.entityId) \n                {\n                    $scope.entityDetected = true;\n                }\n            } else \n            {\n                $scope.message = 'Selected entity cannot have shared attributes';\n            }\n        }\n        if (datasource.dataKeys.length) \n        {\n            if (datasource.dataKeys[0].type != \"attribute\") \n            { \n                $scope.isValidParameter = false;\n            } else \n            {\n                $scope.currentKey = datasource.dataKeys[0].name;\n                $scope.dataKeyType = datasource.dataKeys[0].type;\n                $scope.dataKeyDetected = true;\n            }\n        }\n    }\n    \n\n    if (self.ctx.datasources.length > 0) \n    {\n        var tbDatasource = self.ctx.datasources[0];\n        var datasourceId = 'tbDatasource' + 0;\n\n        self.ctx.datasourceContainer = $('#tbDatasource1', self.ctx.$container);\n\n\n        if (tbDatasource.dataKeys.length > 0) \n        {\n            var dataKey = tbDatasource.dataKeys[0];\n            \n            if (self.ctx.settings.labelVisible) self.ctx.$scope._labelText = dataKey.label;\n            else self.ctx.$scope._labelText = \"\";\n            self.ctx.$scope._txtValue = '0';\n            self.ctx.$scope._txtValue = self.ctx.units;\n            self.ctx.$scope._labelStyle = 'font-size: 12px;';\n            self.ctx.$scope._textStyle = 'font-size: 12px;';\n        }\n    }\n\n    $.fn.textWidth = function() {\n        var html_org = $(this).html();\n        var html_calc = '<span>' + html_org +\n            '</span>';\n        $(this).html(html_calc);\n        var width = $(this).find('span:first')\n            .width();\n        $(this).html(html_org);\n        return width;\n    };\n\n    // Restore all original values when user clicks \"X\"\n    $scope.restoreValues = function() {\n        $scope._value = $scope._value_old;\n    \n        $scope.isFocused = false;\n    };\n\n    // Check if any values changed. Return TRUE if any changes.\n    $scope.checkChangedValues = function() \n    {\n        check = ($scope._value === $scope._value_old)\n\n        return check;\n    }\n\n    $scope.changeFocus = function() \n    {\n        if ($scope._value === $scope._value_old) \n        {\n            $scope.isFocused = false;\n        }\n    }\n\n\n    $scope.updateAttribute = function() \n    {\n        if ($scope.entityDetected) \n        {\n            var datasource = self.ctx.datasources[0];\n\n            // Write value to attribute\n            attributeService.saveEntityAttributes(\n                datasource.entityType,\n                datasource.entityId,\n                types.attributesScope.shared\n                .value,\n                [{\n                    key: $scope.currentKey,\n                    value: $scope._value\n                }]\n            ).then(\n                function success() {\n\n                    // Update the HTML \"previous\" values to the new ones\n                    $scope._value_old = $scope._value;\n\n                    if (settings\n                        .showResultMessage) {\n                        toast.showSuccess(\n                            'Update successful',\n                            1000, angular\n                            .element(self\n                                .ctx\n                                .$container\n                                ),\n                            'bottom left');\n                    }\n                },\n                function fail() {\nconsole.log(\"Fail\")\n\n                    if (settings.showResultMessage) {\n                        toast.showError('Update failed',\n                            angular.element(\n                                self.ctx\n                                .$container),'bottom left');\n                    }\n                }\n            );\n        }\n    };\n\n\n    self.onResize();\n};\n\n\nself.onDataUpdated = function() {\n/*\n    if (!$scope.isFocused) {\n        if (self.ctx.data.length > 0) {\n            var cellData = self.ctx.data[0];\n            if (cellData.data.length > 0) {\n                var value = cellData.data[cellData.data.length - 1][1]\n                $scope._value = value;\n            }\n        }\n    }\n*/\n\n    function isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n    //    if (self.ctx.valueCell && self.ctx.data.length > 0) {\n\n    if (!$scope.isFocused) \n    {\n        if (self.ctx.data.length > 0) \n        {\n            var cellData = self.ctx.data[0];\n            if (cellData.data.length > 0) \n            {\n                var tvPair = cellData.data[cellData.data.length - 1];\n                var value = tvPair[1];\n                var txtValue;\n                if (isNumber(value)) \n                {\n                    var decimals = self.ctx.decimals;\n                    var units = self.ctx.units;\n                    if (self.ctx.datasources.length > 0 &&\n                        self.ctx.datasources[0].dataKeys.length > 0) \n                        {\n                            dataKey = self.ctx.datasources[0].dataKeys[0];\n                        if (dataKey.decimals || dataKey.decimals === 0) \n                        {\n                            decimals = dataKey.decimals;\n                        }\n                        if (dataKey.units) \n                        {\n                            units = dataKey.units;\n                        }\n                    }\n    \n                    txtValue = self.ctx.utils.formatValue(value, decimals, '', true).toLocaleString().replace('.', decimalChar);\n\n                } else \n                {\n                    txtValue = value;\n                }\n                $scope._value = txtValue;\n\n            }\n        }\n    \n        self.ctx.$scope.$digest();\n    }\n};\n\n\nself.onResize = function() \n{\n\n    self.ctx.$scope._labelStyle = \"\";\n    self.ctx.$scope._textStyle  = \"\";\n\n// Scale font size basded on ctx.height if dynamic scaling ins enabled\n    if (self.ctx.settings.scaleDynamic)\n    {\n        var labelFontSize;\n            self.ctx.padding = self.ctx.height / 20;\n            labelFontSize = self.ctx.height / 1.7;\n            self.ctx.valueFontSize = self.ctx.height / 1.7;\n\n        self.ctx.padding = Math.min(12, self.ctx.padding);\n\n        self.ctx.$scope._labelStyle = 'font-size: ' + labelFontSize + 'px; padding: ' + self.ctx.padding + 'px;'\n        self.ctx.$scope._textStyle = 'font-size: ' + self.ctx.valueFontSize + 'px; padding: ' + self.ctx.padding + 'px;'\n    }\n\n// Add CSS inpuit from settings pane\n    self.ctx.$scope._labelStyle += self.ctx.settings.labelStyle;\n    self.ctx.$scope._textStyle += self.ctx.settings.valueStyle;\n\n};\n\nself.typeParameters = function() {\n    return {\n        maxDatasources: 1,\n        maxDataKeys: 1\n    };\n};\n\n\nself.onDestroy = function() {};",
    "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"inputEnabled\" : {\n                \"title\" : \"Input enabled\",\n                \"type\": \"boolean\",\n                \"default\" : true\n            },\n            \"labelVisible\" : {\n                \"title\" : \"Display label\",\n                \"type\": \"boolean\",\n                \"default\" : true\n            },\n            \"scaleDynamic\" : {\n                \"title\" : \"Dynamic font scaling\",\n                \"type\": \"boolean\",\n                \"default\" : true\n            },\n            \"labelStyle\":{\n                \"title\":\"Label styling (CSS). Note: this may override dynamic scaling!\",\n                \"type\":\"string\"\n            },\n            \"valueStyle\":{\n                \"title\":\"Value styling (CSS). Note: this may override dynamic scaling!\",\n                \"type\":\"string\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        {\n            \"key\":\"inputEnabled\"\n        },\n        {\n            \"key\" : \"labelVisible\"\n        },\n        {\n            \"key\":\"scaleDynamic\"  \n        },\n        {\n            \"key\":\"labelStyle\"   \n        },\n        {\n            \"key\":\"valueStyle\"   \n        }\n    ]\n}",
    "dataKeySettingsSchema": "",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Temp\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.2392660816082064,\"funcBody\":\"var value = prevValue + Math.random() * 40 - 20;\\nif (value < -60) {\\n\\tvalue = -60;\\n} else if (value > 60) {\\n\\tvalue = 60;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"rgba(72, 34, 255, 0.69)\",\"color\":\"rgba(255, 255, 255, 0.87)\",\"padding\":\"16px\",\"settings\":{\"labelVisible\":true,\"inputEnabled\":true,\"scaleDynamic\":true},\"title\":\"Value display\",\"dropShadow\":true,\"enableFullscreen\":false,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"units\":\"°C\",\"decimals\":3,\"useDashboardTimewindow\":true,\"showLegend\":false,\"widgetStyle\":{},\"actions\":{},\"enableDataExport\":false,\"displayTimewindow\":true}"
  }
}