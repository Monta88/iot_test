{
  "alias": "value_display2",
  "name": "Temperature control",
  "descriptor": {
    "type": "latest",
    "sizeX": 11,
    "sizeY": 4,
    "resources": [],
    "templateHtml": "<!-- Timestamp        -->\n<!-- 2019.09.27 14:09 Implemented value type control (number/string on input/output) -->\n<!-- 2019.09.26 13:50 Default value: empty -->\n<!-- 2019.09.25 16:57 Fixed writing of properties and multiple read values -->\n<!-- 2019.09.25 First commit -->\n<!-- 2019.09.24 -->\n\n\n<div class = \"input-box\" id=\"inputContainer\">\n<!-- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -->\n    <div ng-repeat=\"x in readValues track by x.index\" class = \"input-box-line\">\n        <span class=\"input-box-line-label\" style=\"{{_labelStyle}}\" >{{x.dataKey.label}}</span>\n        <span class=\"input-box-line-value\" style=\"{{_textStyle}}\">\n            <span class=\"input-box-line-value-static\" style=\"{{_textStyle}}\">{{x.value}}</span>\n            <span class=\"input-box-line-unit\" style=\"{{_textStyle}}\">&nbsp;{{x.dataKey.units}}</span>\n        </span>\n    </div>\n    <div ng-repeat=\"x in setValues track by x.index\" class = \"input-box-line\">\n        <form ng-submit=\"updateAttribute($index)\" class = \"input-box-line\" id=\"inputForm_1\" > \n            <span class=\"input-box-line-label\" style=\"{{_labelStyle}}\" >{{x.dataKey.label}}</span>\n            <span class=\"input-box-line-value\" style=\"{{_textStyle}}\">\n                <span class=\"input-box-line-value-static\">\n                    <input type=\"{{settings.inputType}}\" step=\"{{settings.numberStepSize}}\" value=\"<input>\" ng-model=\"setValues[$index].value\"  ng-focus=\"setValues[$index].isFocused = true\" ng-blur=\"changeFocus($index)\" class=\"input-box-line-value-edit\" style=\"{{_textStyle}}\">\n                </span>\n                <span class=\"input-box-line-unit\" style=\"{{_textStyle}}\">&nbsp;{{x.dataKey.units}}</span>\n            </span>\n            <span class=\"input-box-line-buttons\">\n                <md-button\n                    class=\"md-icon-button applyChanges\"\n                    aria-label=\"Update shared attribute\"\n                    type=\"submit\"\n                    ng-disabled=\"checkChangedValues($index)\"\n                    ng-click=\"values[$index].isFocused = false\">\n                    <md-icon>check</md-icon>\n                    <md-tooltip md-direction=\"top\">Lagre endringer</md-tooltip>\n                </md-button>\n                <md-button\n                    class=\"md-icon-button discardChanges\"\n                    aria-label=\"Discard changes\"\n                    ng-disabled=\"checkChangedValues($index)\"\n                    ng-click=\"restoreValues($index)\">\n                    <md-icon>close</md-icon>\n                    <md-tooltip md-direction=\"top\">Forkast endringer</md-tooltip>\n                </md-button>\n            </span>\n        </form>\n    </div>\n<!-- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -->\n\n</div>",
    "templateCss": "#container {\n    overflow: auto;\n}\n\n.input-box\n{\n    width: 100%;\n    overflow: hidden;\n    display: flex; \n    align-items: baseline;\n    flex-direction: column; \n    flex-wrap: nowrap; \n    justify-content: flex-start; \n    font-weight: 100;\n    \n//    border-style: solid; \n    border-color: yellow;\n}\n\n.input-box-line\n{\n    width: 100%;\n    display: flex; \n    flex-direction: row; \n\n//    border-style: solid; \n    border-color: black;\n}\n\n.input-box-line-label\n{\n    display:flex; \n    flex-basis: auto;\n    flex-shrink: 0;\n    white-space:nowrap;\n    align-self: center;\n\n    opacity: 0.7;\n    font-weight: 400;\n    font-size: 3.500rem;\n\n//    border-style: solid; \n    border-color: white\n}\n\n.input-box-line-unit\n{\n    display:flex; \n    white-space:nowrap;\n    align-self: center;\n    flex-grow: 0; \n\n//    border-style: solid; \n    border-color: yellow;\n}\n\n.input-box-line-value\n{\n    display:flex; \n    justify-content: flex-end; \n    flex-grow: 1; \n    font-size: 5.000rem;\n\n//    border-style: solid; \n    border-color: red;\n}\n\n.input-box-line-value-edit\n{\n    align-self: center;\n    flex-grow: 1; \n    width: 100%; \n    text-align: right; \n    color:inherit; \n    font-weight: inherit; \n    font-family: inherit; \n    font-size: inherit; \n    border-style: solid; \n    border-width: 0px 0px 1px 0px; \n    background-color: inherit; \n    border-color: grey;\n}\n\n.input-box-line-value-static\n{\n    align-self: center;\n    flex-grow: 1;\n    width: 100%; \n    text-align: right; \n//    border-style: solid; \n    border-color: grey;\n}\n\n.input-box-line-buttons\n{\n    display:flex; \n    align-self: flex-end;\n\n//    border-style: solid; \n    border-color: green;\n}\n\n.md-icon-button md-icon {\n    width: 20px;\n    min-width: 20px;\n    height: 20px;\n    min-height: 20px;\n    font-size: 30px;\n}\n\n",
    "controllerScript": "let $scope;\nlet settings;\nlet attributeService;\nlet toast;\nlet utils;\nlet types;\nlet decimalChar;\n\nself.onInit = function() {\n\n    $scope = self.ctx.$scope;\n    attributeService = $scope.$injector.get('attributeService');\n    toast = $scope.$injector.get('toast');\n    utils = $scope.$injector.get('utils');\n    types = $scope.$injector.get('types');\n    settings = angular.copy(self.ctx.settings) || {};\n    decimalChar = (1.5).toLocaleString().charAt(1);\n\n    $scope.settings = settings;\n//    $scope.isValidParameter = true;\n//    $scope.dataKeyDetected = false;\n//    $scope.message = 'No entity selected';\n//    $scope.requiredErrorMessage = settings.requiredErrorMessage || \"Entity attribute is required\";\n    \n// Init scope variables\n    $scope.readValues = [];\n    $scope.setValues = [];\n\n// console.log(\"self.ctx.datasources.length: \" + self.ctx.datasources.length);\n\n    if (self.ctx.datasources.length > 0 && self.ctx.datasources[0].dataKeys.length > 0) \n    {\n        // Scan throug all data to find the correct unit and decimals\n        for (i = 0; i < self.ctx.datasources[0].dataKeys.length; i++)\n        {\n            dataKey = self.ctx.datasources[0].dataKeys[i];\n            valueset = {index: i, value: 0, dataKey: dataKey};\n            $scope.readValues.push(valueset);\n        }\n    }\n\n    if (self.ctx.datasources.length > 1 && self.ctx.datasources[1].dataKeys.length > 0) \n    {\n        // Scan throug all data to find the correct unit and decimals\n        for (i = 0; i < self.ctx.datasources[1].dataKeys.length; i++)\n        {\n            dataKey = self.ctx.datasources[1].dataKeys[i];\n            valueset = {index: i, value: 0, old_value: 0, isFocused: false, dataKey: dataKey};\n            $scope.setValues.push(valueset);\n        }\n    }\n\n    self.ctx.$scope._labelStyle = 'font-size: 12px;';\n    self.ctx.$scope._textStyle = 'font-size: 12px;';\n\n    $.fn.textWidth = function() {\n        var html_org = $(this).html();\n        var html_calc = '<span>' + html_org +\n            '</span>';\n        $(this).html(html_calc);\n        var width = $(this).find('span:first')\n            .width();\n        $(this).html(html_org);\n        return width;\n    };\n\n    // Restore all original values when user clicks \"X\"\n    $scope.restoreValues = function(n) \n    {\n        $scope.setValues[n].value = $scope.setValues[n].value_old;\n        $scope.setValues[n].isFocused = false;\n    };\n\n    // Check if any values changed. Return TRUE if any changes.\n    $scope.checkChangedValues = function(n) \n    {\n        check = ($scope.setValues[n].value === $scope.setValues[n].value_old)\n        return check;\n    }\n\n    // Release focus if value is unchanged\n    $scope.changeFocus = function(n) \n    {\n        if ($scope.setValues[n].value === $scope.setValues[n].value_old) \n        {\n            $scope.setValues[n].isFocused = false;\n        }\n    }\n\n// Write to attributes\n    $scope.updateAttribute = function(i) \n    {\n\n    function isNumber(n) \n    {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n\n        if (self.ctx.datasources && self.ctx.datasources.length) \n        {\n            var datasource = self.ctx.datasources[1];\n\n            if (!(datasource.type === 'entity' && \n                datasource.entityType === \"DEVICE\" &&\n                datasource.entityType && datasource.entityId))\n            {\n                toast.showError('Selected entity cannot be written', angular.element(self.ctx.$container),'bottom left');\n                return;\n            }\n\n            if ($scope.setValues[i].dataKey.type != \"attribute\") \n            { \n                toast.showError('Not an attribute', angular.element(self.ctx.$container),'bottom left');\n                return;\n            } \n\n            // Convert to correct output type\n            if (settings.outputType === 'number') n = self.getTypedValue($scope.setValues[i].value);\n            else n = $scope.setValues[i].value+''\n\n            // Write value to attribute\n            attributeService.saveEntityAttributes(\n                datasource.entityType,\n                datasource.entityId,\n                types.attributesScope.shared.value, \n                [{ key: $scope.setValues[i].dataKey.name, value: n }]\n            ).then(function success() \n                {\n                    // Update the HTML \"previous\" values to the new ones\n                    $scope.setValues[i].value_old = $scope.setValues[i].value;\n\n                    if (settings.showResultMessage) \n                    {\n                        toast.showSuccess('Update successful', 1000, angular.element(self.ctx.$container),'bottom left');\n                    }\n                },\n                function fail() \n                {\n                    if (settings.showResultMessage) \n                    {\n                        toast.showError('Update failed', angular.element(self.ctx.$container),'bottom left');\n                    }\n                }\n            );\n        }\n    };\n\n    self.onResize();\n};\n\n// Parse and return the correct typed value from string. (string, float, boolean, integer etc.)\nself.getTypedValue = function(n)\n{\n    function isNumber(n) { return !isNaN(parseFloat(n)) && isFinite(n); };\n\n    if (typeof n === 'number') return n;\n    else if (typeof n === 'string' && isNumber(n.replace(decimalChar, '.')))\n    {\n        try { nnn = parseFloat(n.replace(decimalChar, '.')); }\n        catch (e) { nnn = n; }\n        return nnn;\n    }\n    else return n;\n}\n\n// Update values\nself.onDataUpdated = function() \n{\n    function isNumber(n) { return !isNaN(parseFloat(n)) && isFinite(n); }\n\n    if (self.ctx.data.length > 0)\n    {\n        // Scan throug all data to find the correct unit and decimals\n        for (i = 0; i < self.ctx.data.length; i++)\n        {\n            // Scan through all values and find the set-variables\n            for (n = 0; n < $scope.setValues.length; n++)\n            {\n                if (!$scope.setValues[n].isFocused && $scope.setValues[n].dataKey === self.ctx.data[i].dataKey)\n                {\n                    decimals = self.ctx.data[i].dataKey.decimals;\n                    if (self.ctx.data[i].data.length > 0) value = self.ctx.data[i].data[0][1];\n                    else value = '';\n\n                    // Put correct value if number type is to be displayed\n                    if (settings.inputType === 'number')\n                    {\n                        if (typeof value === 'number') \n                        {\n                            p = Math.pow(10, decimals);\n                            clamped = Math.round(value*p)/p;\n                            $scope.setValues[n].value = clamped;\n                        }\n                        else $scope.setValues[n].value = ''\n                    }\n                    // Everything else (strings or numbers formatted as string)\n                    else\n                    {\n                        if (isNumber(value)) $scope.setValues[n].value = self.ctx.utils.formatValue(value, decimals, '', true).toLocaleString().replace('.', decimalChar);\n                        else $scope.setValues[n].value = value;\n                    }\n                     $scope.setValues[n].value_old =  $scope.setValues[n].value;\n                }\n            }\n                \n            // Scan through all values and find the read only-variables\n            for (n = 0; n < $scope.readValues.length; n++)\n            {\n                if ($scope.readValues[n].dataKey === self.ctx.data[i].dataKey)\n                {\n                    decimals = self.ctx.data[i].dataKey.decimals;\n                    if (self.ctx.data[i].data.length > 0) value = self.ctx.data[i].data[0][1];\n                    else value = '';\n\n                    if (isNumber(value)) $scope.readValues[n].value = self.ctx.utils.formatValue(value, decimals, '', true).toLocaleString().replace('.', decimalChar);\n                    else $scope.readValues[n].value = value;\n                }\n            }\n        }\n        \n        self.ctx.$scope.$digest();\n    }\n};\n\nself.onResize = function() \n{\n\n    self.ctx.$scope._labelStyle = \"\";\n    self.ctx.$scope._textStyle  = \"\";\n    noof_elements = $scope.setValues.length + $scope.readValues.length;\n\n// Scale font size basded on ctx.height if dynamic scaling ins enabled\n    if (self.ctx.settings.scaleDynamic)\n    {\n        var labelFontSize;\n            self.ctx.padding = self.ctx.height / (20 * noof_elements);\n            labelFontSize = self.ctx.height / (1.7 * noof_elements);\n            self.ctx.valueFontSize = self.ctx.height / (1.7 * noof_elements);\n\n        self.ctx.padding = Math.min(12, self.ctx.padding);\n\n        self.ctx.$scope._labelStyle = 'font-size: ' + labelFontSize + 'px; padding: ' + self.ctx.padding + 'px;'\n        self.ctx.$scope._textStyle = 'font-size: ' + self.ctx.valueFontSize + 'px; padding: ' + self.ctx.padding + 'px;'\n    }\n\n// Add CSS inpuit from settings pane\n    self.ctx.$scope._labelStyle += self.ctx.settings.labelStyle;\n    self.ctx.$scope._textStyle += self.ctx.settings.valueStyle;\n\n};\n\nself.typeParameters = function() \n{\n    return {maxDatasources: 2, maxDataKeys: -1};\n};\n\n\nself.onDestroy = function() {};",
    "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"inputType\": {\n                \"title\": \"Input type\",\n                \"type\": \"string\",\n                \"enum\": [\n                    \"string\",\n                    \"number\"]\n            },\n            \"numberStepSize\" : {\n                \"title\" : \"Number input step size (only applicable for number input)\",\n                \"type\": \"number\",\n                \"default\" : 0.1\n            },\n            \"outputType\": {\n                \"title\": \"Output type\",\n                \"type\": \"string\",\n                \"enum\": [\n                    \"string\",\n                    \"number\"]\n            },\n            \"showResultMessage\" : {\n                \"title\" : \"Show result message\",\n                \"type\": \"boolean\",\n                \"default\" : true\n            },\n            \"labelVisible\" : {\n                \"title\" : \"Display label\",\n                \"type\": \"boolean\",\n                \"default\" : true\n            },\n            \"scaleDynamic\" : {\n                \"title\" : \"Dynamic font scaling\",\n                \"type\": \"boolean\",\n                \"default\" : true\n            },\n            \"labelStyle\":{\n                \"title\":\"Label styling (CSS). Note: this may override dynamic scaling!\",\n                \"type\":\"string\"\n            },\n            \"valueStyle\":{\n                \"title\":\"Value styling (CSS). Note: this may override dynamic scaling!\",\n                \"type\":\"string\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        {\n            \"key\":\"inputType\",\n            \"type\":\"radios\",\n            \"titleMap\": [\n                {\n                \"value\": \"string\",\n                \"name\": \"String\"\n                },\n                {\n                \"value\": \"number\",\n                \"name\": \"Number\"\n                }\n            ]\n        },\n        \"numberStepSize\",\n        {\n            \"key\":\"outputType\",\n            \"type\":\"radios\",\n            \"titleMap\": [\n                {\n                \"value\": \"string\",\n                \"name\": \"String\"\n                },\n                {\n                \"value\": \"number\",\n                \"name\": \"Number\"\n                }\n            ]\n        },\n        \"showResultMessage\",\n        \"scaleDynamic\",\n        \"labelStyle\",\n        \"valueStyle\"   \n    ]\n}",
    "dataKeySettingsSchema": "",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Temp\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.2392660816082064,\"funcBody\":\"var value = prevValue + Math.random() * 40 - 20;\\nif (value < -60) {\\n\\tvalue = -60;\\n} else if (value > 60) {\\n\\tvalue = 60;\\n}\\nreturn value;\",\"units\":\"\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random 2\",\"color\":\"#f44336\",\"settings\":{},\"_hash\":0.7895759607010975,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\",\"units\":\"c\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#607d8b\",\"settings\":{},\"_hash\":0.1510234650601947,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\",\"units\":\"MWh\",\"decimals\":4},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"aaa\",\"color\":\"#9c27b0\",\"settings\":{},\"_hash\":0.9679345848761298,\"funcBody\":\"return 5\"}]},{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin 2\",\"color\":\"#607d8b\",\"settings\":{},\"_hash\":0.7230808526616153,\"funcBody\":\"return 10*Math.sin(time/5000);\",\"units\":\"°C\",\"decimals\":3},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Cos\",\"color\":\"#9c27b0\",\"settings\":{},\"_hash\":0.3429947659316879,\"funcBody\":\"return 10*Math.cos(time/5000);\",\"units\":\"a\",\"decimals\":1}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"rgba(34, 244, 255, 0.69)\",\"color\":\"rgba(1, 1, 1, 0.87)\",\"padding\":\"16px\",\"settings\":{\"labelVisible\":false,\"scaleDynamic\":true,\"showResultMessage\":true,\"numberStepSize\":0.2,\"inputType\":\"string\"},\"title\":\"Temperature control\",\"dropShadow\":true,\"enableFullscreen\":false,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"units\":\"°C\",\"decimals\":3,\"useDashboardTimewindow\":true,\"showLegend\":false,\"widgetStyle\":{},\"actions\":{},\"enableDataExport\":false,\"displayTimewindow\":true}"
  }
}