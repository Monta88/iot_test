{
  "ruleChain": {
    "additionalInfo": null,
    "name": "Create/Clear Alarm & send Email",
    "firstRuleNodeId": null,
    "root": false,
    "debugMode": false,
    "configuration": null
  },
  "metadata": {
    "firstNodeIndex": 1,
    "nodes": [
      {
        "additionalInfo": {
          "layoutX": 1177,
          "layoutY": 389
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode",
        "name": "save in db",
        "debugMode": true,
        "configuration": {
          "scope": "SERVER_SCOPE"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 193,
          "layoutY": 394
        },
        "type": "org.thingsboard.rule.engine.filter.TbCheckMessageNode",
        "name": "check filed",
        "debugMode": true,
        "configuration": {
          "messageNames": [
            "Alarm"
          ],
          "metadataNames": [],
          "checkAllKeys": true
        }
      },
      {
        "additionalInfo": {
          "layoutX": 800,
          "layoutY": 259
        },
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "Create Alarm",
        "debugMode": true,
        "configuration": {
          "alarmType": "General Alarm",
          "alarmDetailsBuildJs": "var details = {};\ndetails.Alarm= msg.Alarm;\nif (metadata.prevAlarmDetails) {\n    var prevDEtails = JSON.parse(metadata.prevAlarmDetails);\n    details.count = prevDEtails.count + 1;\n}else\n{\n    details.count = 1;\n}\nreturn details;",
          "severity": "CRITICAL",
          "propagate": true,
          "useMessageAlarmData": false
        }
      },
      {
        "additionalInfo": {
          "layoutX": 488,
          "layoutY": 401
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsFilterNode",
        "name": "Under Threshold",
        "debugMode": true,
        "configuration": {
          "jsScript": "return msg.Alarm == 1;\n//return msg.temperature1 < -30 || msg.temperature1 > 50;"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 604,
          "layoutY": 55
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Add temperature to metdata",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.temperature = msg.temperature;\r\n return {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1030,
          "layoutY": 42
        },
        "type": "org.thingsboard.rule.engine.mail.TbMsgToEmailNode",
        "name": "Temperature Email",
        "debugMode": false,
        "configuration": {
          "fromTemplate": "info@testmail.org",
          "toTemplate": "mj@iotsolutions.no",
          "ccTemplate": null,
          "bccTemplate": null,
          "subjectTemplate": "Device ${deviceType} temperature high",
          "bodyTemplate": "Device ${deviceName} has high temperature ${temp}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1331,
          "layoutY": 40
        },
        "type": "org.thingsboard.rule.engine.mail.TbSendEmailNode",
        "name": "Send Email SMTP",
        "debugMode": false,
        "configuration": {
          "useSystemSmtpSettings": true,
          "smtpHost": "localhost",
          "smtpPort": 25,
          "username": null,
          "password": null,
          "smtpProtocol": "smtp",
          "timeout": 10000,
          "enableTls": false
        }
      },
      {
        "additionalInfo": {
          "layoutX": 785,
          "layoutY": 567
        },
        "type": "org.thingsboard.rule.engine.action.TbClearAlarmNode",
        "name": "Clear Alarm",
        "debugMode": true,
        "configuration": {
          "alarmType": "Critical Ventilation alarm",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\ndetails.ClearedAlarm = msg.alarm;\nreturn details;\n/*\nvar details = {alarm: msg.Alarm, count: 1};\n\nif (metadata.prevAlarmDetails) {\n    var prevDetails = JSON.parse(metadata.prevAlarmDetails);\n    if(prevDetails.count) {\n        details.count = prevDetails.count + 1;\n    }\n}\n*/\nreturn details;"
        }
      }
    ],
    "connections": [
      {
        "fromIndex": 1,
        "toIndex": 3,
        "type": "True"
      },
      {
        "fromIndex": 2,
        "toIndex": 0,
        "type": "Created"
      },
      {
        "fromIndex": 2,
        "toIndex": 0,
        "type": "Updated"
      },
      {
        "fromIndex": 2,
        "toIndex": 0,
        "type": "False"
      },
      {
        "fromIndex": 2,
        "toIndex": 0,
        "type": "Failure"
      },
      {
        "fromIndex": 3,
        "toIndex": 2,
        "type": "True"
      },
      {
        "fromIndex": 3,
        "toIndex": 7,
        "type": "False"
      },
      {
        "fromIndex": 5,
        "toIndex": 6,
        "type": "Success"
      },
      {
        "fromIndex": 7,
        "toIndex": 0,
        "type": "Cleared"
      }
    ],
    "ruleChainConnections": null
  }
}